// Problem 12: Highly divisible triangular number
// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// Let us list the factors of the first seven triangle numbers:
// 1: 1
// 3: 1, 3
// 6: 1, 2, 3, 6
// 10: 1, 2, 5, 10
// 15: 1, 3, 5, 15
// 21: 1, 3, 7, 21
// 28: 1, 2, 4, 7, 14, 28
// We can see that 28 is the first triangle number to have over five divisors.
// What is the value of the first triangle number to have over n divisors?
// I originally did this completely on my own, but it ran too slowly,
// so I goolged for some faster ways of doing the first two aux functions:
// The 'sumIntsToN' function is from: https://javascript.info/task/sum-to
// The 'findNumberOfDivisors' function is from: https://www.geeksforgeeks.org/javascript-program-to-find-all-divisors-of-a-number/

function sumIntsToN(n) {
  return (n * (n + 1)) / 2;
}

function findNumberOfDivisors(n) {
  let result = [1, n];
  for (let i = 2; i < Math.pow(n, 0.5); i++) {
    if (n % i == 0) {
      result.push(i);
      result.push(n / i);
    }
  }
  return result.length;
}

function divisibleTriangleNumber(n) {
  let greatestNumberOfDivisorsSoFar = 1;
  let currTriangleNum = 1;
  let currNumberForTriangling = 1;

  while (greatestNumberOfDivisorsSoFar < n) {
    currTriangleNum = sumIntsToN(currNumberForTriangling);
    greatestNumberOfDivisorsSoFar = findNumberOfDivisors(currTriangleNum);
    currNumberForTriangling++;
  }
  return currTriangleNum;
}

console.log(divisibleTriangleNumber(5));
console.log(divisibleTriangleNumber(23));
console.log(divisibleTriangleNumber(167));
console.log(divisibleTriangleNumber(374));
console.log(divisibleTriangleNumber(500));
